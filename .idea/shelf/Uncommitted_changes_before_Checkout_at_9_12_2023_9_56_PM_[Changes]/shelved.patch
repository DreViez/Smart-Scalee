Index: app/src/main/java/com/example/smartscaleapp/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.smartscaleapp\r\n\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport com.google.android.gms.auth.api.signin.GoogleSignIn\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInAccount\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInClient\r\nimport com.google.android.gms.auth.api.signin.GoogleSignInOptions\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.GoogleAuthProvider\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\n\r\nclass LoginActivity : AppCompatActivity() {\r\n\r\n    private lateinit var auth: FirebaseAuth\r\n    private lateinit var googleSignInClient: GoogleSignInClient\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n\r\n        auth = FirebaseAuth.getInstance()\r\n\r\n        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)\r\n            .requestIdToken(getString(R.string.default_web_client_id))\r\n            .requestEmail()\r\n            .build()\r\n\r\n        googleSignInClient = GoogleSignIn.getClient(this, gso)\r\n\r\n        findViewById<Button>(R.id.gSignInBtn).setOnClickListener {\r\n            signInGoogle()\r\n        }\r\n        findViewById<Button>(R.id.emailSignInBtn).setOnClickListener {\r\n            signInWithEmail()\r\n        }\r\n        findViewById<Button>(R.id.signupBtn).setOnClickListener {\r\n            startActivity(Intent(this, SignupActivity::class.java))\r\n        }\r\n        findViewById<Button>(R.id.forgotPasswordBtn).setOnClickListener {\r\n            startActivity(Intent(this, ForgotPasswordActivity::class.java))\r\n\r\n//pasword reset\r\n\r\n        }\r\n    }\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if (requestCode == REQUEST_DISPLAY_NAME && resultCode == Activity.RESULT_OK) {\r\n            val displayName = data?.getStringExtra(\"display_name\")\r\n            if (displayName != null) {\r\n                // Handle the display name (e.g., save it, display it)\r\n                // now go to mainactivity\r\n                val intent = Intent(this, MainActivity::class.java)\r\n                startActivity(intent)\r\n                finish()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun signInWithEmail() {\r\n\r\n        val emailEditText = findViewById<EditText>(R.id.emailEditText)\r\n        val passwordEditText = findViewById<EditText>(R.id.passwordEditText)\r\n\r\n\r\n        val email = emailEditText.text.toString()\r\n        val password = passwordEditText.text.toString()\r\n\r\n        if (email.isEmpty() || password.isEmpty()) {\r\n            Toast.makeText(this, \"Please enter email and password\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n\r\n        auth.signInWithEmailAndPassword(email, password)\r\n            .addOnCompleteListener(this) { task ->\r\n                if (task.isSuccessful) {\r\n                    val user = auth.currentUser\r\n                    if (user != null) {\r\n                        val firestoreManager = FireStoreManager()\r\n                        val userData = User(user.email ?: \"\", user.displayName ?: \"\")\r\n\r\n                        // Check if the user's email exists in Firestore\r\n                        checkIfEmailExistsInFirestore(userData.email)\r\n                    }\r\n                } else {\r\n                    Toast.makeText(baseContext, \"Authentication failed.\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n\r\n    }\r\n    private fun checkIfEmailExistsInFirestore(email: String) {\r\n        val db = FirebaseFirestore.getInstance()\r\n        val query = db.collection(\"users\").whereEqualTo(\"email\", email)\r\n\r\n        query.get().addOnCompleteListener { task ->\r\n            if (task.isSuccessful) {\r\n                val querySnapshot = task.result\r\n                if (querySnapshot != null && !querySnapshot.isEmpty) {\r\n                    // Email exists in Firestore; no need to show display name prompt\r\n                    val intent = Intent(this, MainActivity::class.java)\r\n                    startActivity(intent)\r\n                    finish()\r\n                } else {\r\n                    // Email doesn't exist in Firestore; show display name prompt\r\n                    showDisplayNamePrompt()\r\n                }\r\n            } else {\r\n                Toast.makeText(this, \"Error checking email in Firestore\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n    private fun signInGoogle() {\r\n        val signInIntent = googleSignInClient.signInIntent\r\n        launcher.launch(signInIntent)\r\n    }\r\n\r\n    private val launcher =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r\n            if (result.resultCode == Activity.RESULT_OK) {\r\n\r\n                val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)\r\n                handleResults(task)\r\n            }\r\n        }\r\n\r\n    private fun handleResults(task: Task<GoogleSignInAccount>) {\r\n        if (task.isSuccessful) {\r\n            val account: GoogleSignInAccount? = task.result\r\n            if (account != null) {\r\n                updateUI(account)\r\n            }\r\n        } else {\r\n            Toast.makeText(this, task.exception.toString(), Toast.LENGTH_SHORT).show()\r\n        }\r\n    }\r\n\r\n    private fun updateUI(account: GoogleSignInAccount) {\r\n        val credential = GoogleAuthProvider.getCredential(account.idToken, null)\r\n        auth.signInWithCredential(credential).addOnCompleteListener {\r\n            if (it.isSuccessful) {\r\n                val user = auth.currentUser\r\n                if (user != null) {\r\n                    val firestoreManager = FireStoreManager()\r\n                    val userData = User(user.email ?: \"\", user.displayName ?: \"\")\r\n                    addUserToFirestore(userData.email, userData.displayName) // Add user data to Firestore\r\n                    println(\"Sign in with Google successful\") // use for debugin statement\r\n                    // Prompt the user to set their display name\r\n                    val intent = Intent(this, MainActivity::class.java)\r\n                    intent.putExtra(\"email\", account.email)\r\n                    intent.putExtra(\"name\", account.displayName)\r\n                    startActivity(intent)\r\n                    finish()\r\n                } else {\r\n                    Toast.makeText(this, \"User not authenticated\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            } else {\r\n                Toast.makeText(this, it.exception.toString(), Toast.LENGTH_SHORT).show()\r\n\r\n            }\r\n        }\r\n    }\r\n    private fun addUserToFirestore(email: String, displayName: String) {\r\n        val db = FirebaseFirestore.getInstance()\r\n        val userUid = FirebaseAuth.getInstance().currentUser?.uid\r\n\r\n        if (userUid != null) {\r\n            val userData = hashMapOf(\r\n                \"email\" to email,\r\n                \"displayName\" to displayName\r\n            )\r\n\r\n            db.collection(\"users\")\r\n                .document(userUid)\r\n                .set(userData)\r\n                .addOnSuccessListener {\r\n                    Log.d(\"Firestore\", \"User data added/updated successfully\")\r\n                }\r\n                .addOnFailureListener { e ->\r\n                    Log.e(\"Firestore\", \"Error adding/updating user data\", e)\r\n                }\r\n        }\r\n    }\r\n    private fun showDisplayNamePrompt() {\r\n        Log.d(\"DisplayNameActivity\", \"Checking for display name in SharedPreferences\")\r\n        val sharedPreferences = getSharedPreferences(\"MyAppPrefs\", Context.MODE_PRIVATE)\r\n        val displayName = sharedPreferences.getString(\"displayName\", null)\r\n\r\n        if (displayName == null) {\r\n            // Display name is not available; prompt the user to set it\r\n            val intent = Intent(this, DisplayNameActivity::class.java)\r\n            startActivityForResult(intent, REQUEST_DISPLAY_NAME)\r\n        }\r\n    }\r\n\r\n\r\n    companion object {\r\n        const val REQUEST_DISPLAY_NAME = 1\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/smartscaleapp/LoginActivity.kt b/app/src/main/java/com/example/smartscaleapp/LoginActivity.kt
--- a/app/src/main/java/com/example/smartscaleapp/LoginActivity.kt	
+++ b/app/src/main/java/com/example/smartscaleapp/LoginActivity.kt	
@@ -92,13 +92,16 @@
                         val userData = User(user.email ?: "", user.displayName ?: "")
 
                         // Check if the user's email exists in Firestore
+                        Log.d("SignInWithEmail", "User signed in successfully")
                         checkIfEmailExistsInFirestore(userData.email)
                     }
                 } else {
+                    Log.e("SignInWithEmail", "Authentication failed: ${task.exception}")
                     Toast.makeText(baseContext, "Authentication failed.", Toast.LENGTH_SHORT).show()
                 }
             }
 
+
     }
     private fun checkIfEmailExistsInFirestore(email: String) {
         val db = FirebaseFirestore.getInstance()
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	
+++ /dev/null	
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <targetSelectedWithDropDown>
-      <Target>
-        <type value="QUICK_BOOT_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\ViezPC1\.android\avd\Copy_of_Pixel_7_Pro_API_30.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </targetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-09-07T18:54:25.590200400Z" />
-  </component>
-</project>
\ No newline at end of file
